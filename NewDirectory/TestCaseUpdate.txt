```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator

@pytest.mark.parametrize("test_input, expected_output", [
    (5, 120),  # testing with positive integer
    (3, 6),  # testing with another positive integer
    (1, 1),  # testing with 1
    (0, 1),  # testing with 0, should return 1 as per mathematical definition
])
def test_factorial(test_input, expected_output):
    assert factorial(test_input) == expected_output

def test_factorial_negative():
    # testing with negative integer, should raise ValueError
    with pytest.raises(ValueError):
        factorial(-5)

def test_factorial_non_integer():
    # testing with non-integer, should raise ValueError
    with pytest.raises(ValueError):
        factorial(4.5)
    with pytest.raises(ValueError):
        factorial('five')
```