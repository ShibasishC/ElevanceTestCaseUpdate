```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator
@pytest.mark.parametrize("input,expected", [
    (5, 120),  # testing with positive integer
    (10, 3628800),  # testing with positive integer
    (1, 1),  # testing with edge case of smallest positive integer
    (0, 1),  # testing with edge case of zero
    (50, 30414093201713378043612608166064768844377641568960512000000000000),  # testing with large number
])
def test_factorial(input, expected):
    assert factorial(input) == expected

@pytest.mark.parametrize("input", [
    -5,  # testing with negative number
    5.5,  # testing with non-integer number
    '5',  # testing with non-integer number
])
def test_factorial_invalid_input(input):
    with pytest.raises((RecursionError, TypeError)):  # expecting either RecursionError or TypeError
        factorial(input)

def test_factorial_no_input():
    with pytest.raises(TypeError):  # expecting TypeError when no input is provided
        factorial()
```