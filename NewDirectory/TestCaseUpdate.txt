```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator

# Test the function's behavior for positive integers
@pytest.mark.parametrize("test_input, expected_output", [(5, 120), (10, 3628800)])
def test_factorial_positive_integers(test_input, expected_output):
    assert factorial(test_input) == expected_output

# Test the function's behavior for small numbers (edge case)
@pytest.mark.parametrize("test_input, expected_output", [(1, 1), (0, 1)])
def test_factorial_small_numbers(test_input, expected_output):
    assert factorial(test_input) == expected_output

# Test the function's behavior for large numbers (edge case)
def test_factorial_large_numbers():
    # This test might take a while to run, but it's important to ensure our function can handle large inputs
    assert factorial(1000) is not None

# Test the function's behavior for negative numbers
def test_factorial_negative_numbers():
    with pytest.raises(RecursionError):
        factorial(-5)

# Test the function's behavior for non-integer inputs
@pytest.mark.parametrize("test_input", [5.5, 'a'])
def test_factorial_non_integer_inputs(test_input):
    with pytest.raises(TypeError):
        factorial(test_input)
```