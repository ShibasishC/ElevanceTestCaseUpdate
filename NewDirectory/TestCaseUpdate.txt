```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator

# Test the function's behavior for a wide range of possible inputs
@pytest.mark.parametrize("test_input,expected", [(5, 120), (3, 6)])
def test_factorial_positive_integer(test_input, expected):
    assert factorial(test_input) == expected

# Test edge case where input is 1
def test_factorial_one():
    assert factorial(1) == 1

# Test edge case where input is 0
def test_factorial_zero():
    assert factorial(0) == 1

# Test edge case where input is a negative integer
def test_factorial_negative_integer():
    with pytest.raises(ValueError):
        factorial(-5)

# Test edge case where input is a non-integer
@pytest.mark.parametrize("test_input", [2.5, '5'])
def test_factorial_non_integer(test_input):
    with pytest.raises(TypeError):
        factorial(test_input)

# Test performance for large integer input
def test_factorial_large_integer():
    assert factorial(1000) is not None
```