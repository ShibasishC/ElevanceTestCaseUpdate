```python
# imports
import pytest  # used for our unit tests

# function to test
def factorial(x):
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))

# unit tests
# below, each test case is represented by a tuple passed to the @pytest.mark.parametrize decorator

# Test the function's behavior for positive integers
@pytest.mark.parametrize("test_input, expected_output", [(5, 120), (3, 6)])
def test_factorial_positive_integers(test_input, expected_output):
    assert factorial(test_input) == expected_output

# Test edge case: Small numbers
@pytest.mark.parametrize("test_input, expected_output", [(1, 1), (0, 1)])
def test_factorial_small_numbers(test_input, expected_output):
    assert factorial(test_input) == expected_output

# Test edge case: Large numbers
# Note: The factorial of 100 is a very large number, so it's not included here. 
# This is just an example of how you might structure such a test.
@pytest.mark.parametrize("test_input", [100])
def test_factorial_large_numbers(test_input):
    assert isinstance(factorial(test_input), int)

# Test the function's behavior for negative numbers
@pytest.mark.parametrize("test_input", [-5, -10])
def test_factorial_negative_numbers(test_input):
    with pytest.raises(ValueError):
        factorial(test_input)

# Test the function's behavior for non-integer values
@pytest.mark.parametrize("test_input", [2.5, 'a'])
def test_factorial_non_integer_values(test_input):
    with pytest.raises(TypeError):
        factorial(test_input)
```